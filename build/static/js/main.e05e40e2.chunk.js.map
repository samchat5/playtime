{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","handleTermChange","bind","handleOnClick","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","handleAddTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","style","textAlign","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","replace","search","token","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","items","artists","uri","savePlaylist","trackUris","length","userID","method","body","JSON","stringify","playlistID","uris","App","playlistName","handleOnAdd","handleOnRemove","handleOnNameChange","handleOnSave","handleSearch","find","savedTrack","push","filter","t","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e05e40e2.chunk.js","sourcesContent":["let accessToken\r\nconst redirectUri = 'http://localhost:3000/'\r\nconst clientID = 'ca66d55317b74fd5b3348d9ce74c1765'\r\n\r\nconst Spotify = {\r\n  getAccessToken () {\r\n    if (accessToken) {\r\n      return accessToken\r\n    }\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1]\r\n      const expiresIn = Number(expiresInMatch[1])\r\n      window.setTimeout(() => { accessToken = '' }, expiresIn * 1000)\r\n      window.history.pushState('Access Token', null, '/')\r\n      return accessToken;\r\n    } else {\r\n      window.location.replace(`https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`)\r\n    }\r\n  },\r\n\r\n  search (term) {\r\n    const token = this.getAccessToken()\r\n    return (\r\n      // eslint-disable-next-line\r\n      fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      }).then(response => response.json()).then(jsonResponse => {\r\n        console.log(jsonResponse)\r\n        if (!jsonResponse.tracks) {\r\n          return []\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }))\r\n      })\r\n    )\r\n  },\r\n\r\n  savePlaylist (name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return\r\n    }\r\n    const accessToken = this.getAccessToken()\r\n    const headers = { Authorization: `Bearer ${accessToken}` }\r\n    let userID\r\n    // eslint-disable-next-line\r\n    return fetch('https://api.spotify.com/v1/me', { headers: headers }).then(response => response.json()).then(jsonResponse => {\r\n      userID = jsonResponse.id\r\n      // eslint-disable-next-line\r\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({ name: name })\r\n      }).then(response => response.json()).then(jsonResponse => {\r\n        const playlistID = jsonResponse.id\r\n        // eslint-disable-next-line\r\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ uris: trackUris })\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default Spotify\r\n","import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { term: '' }\r\n    this.handleTermChange = this.handleTermChange.bind(this)\r\n    this.handleOnClick = this.handleOnClick.bind(this)\r\n  }\r\n\r\n  handleOnClick () {\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n\r\n  handleTermChange (event) {\r\n    this.setState({ term: event.target.value })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='SearchBar'>\r\n        <input onChange={this.handleTermChange} placeholder='Enter A Song, Album, or Artist' />\r\n        <button className='SearchButton' onClick={this.handleOnClick}>SEARCH</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport './Track.css'\r\n\r\nclass Track extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.handleAddTrack = this.handleAddTrack.bind(this)\r\n    this.handleOnClick = this.handleOnClick.bind(this)\r\n  }\r\n\r\n  renderAction () {\r\n    if (this.props.isRemoval) {\r\n      return <button onClick={this.handleOnClick} className='Track-action'>-</button>\r\n    } else {\r\n      return <button onClick={this.handleAddTrack} className='Track-action'>+</button>\r\n    }\r\n  }\r\n\r\n  handleAddTrack () {\r\n    this.props.onAdd(this.props.track)\r\n  }\r\n\r\n  handleOnClick () {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='Track'>\r\n        <div className='Track-information'>\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Track\r\n","import React from 'react'\r\nimport './TrackList.css'\r\nimport Track from '../Track/Track.js'\r\n\r\nclass TrackList extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='TrackList'>\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track track={track} key={track.id} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval} onRemove={this.props.onRemove} />\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TrackList\r\n","import React from 'react'\r\nimport './SearchResults.css'\r\nimport TrackList from '../TrackList/TrackList.js'\r\n\r\nclass SearchResults extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='SearchResults'>\r\n        <h2 className='card-header' style={{ textAlign: 'center' }}>Results</h2><hr />\r\n        <TrackList isRemoval={false} onAdd={this.props.onAdd} tracks={this.props.searchResults} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchResults\r\n","import React from 'react'\r\nimport './Playlist.css'\r\nimport TrackList from '../TrackList/TrackList.js'\r\n\r\nclass Playlist extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.handleNameChange = this.handleNameChange.bind(this)\r\n  }\r\n\r\n  handleNameChange (event) {\r\n    this.props.onNameChange(event.target.value)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='Playlist'>\r\n        <input onChange={this.handleNameChange} defaultValue='New Playlist' />\r\n        <TrackList onRemove={this.props.onRemove} isRemoval tracks={this.props.playlistTracks} />\r\n        <button onClick={this.props.onSave} className='Playlist-save'>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Playlist\r\n","import React from 'react'\nimport './App.css'\nimport SearchBar from '../SearchBar/SearchBar.js'\nimport SearchResults from '../SearchResults/SearchResults.js'\nimport Playlist from '../Playlist/Playlist.js'\nimport Spotify from '../../util/Spotify.js'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { searchResults: [], playlistName: '', playlistTracks: [] }\n    this.handleOnAdd = this.handleOnAdd.bind(this)\n    this.handleOnRemove = this.handleOnRemove.bind(this)\n    this.handleOnNameChange = this.handleOnNameChange.bind(this)\n    this.handleOnSave = this.handleOnSave.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  handleOnAdd (track) {\n    if (!this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      this.state.playlistTracks.push(track)\n      this.setState({ playlistTracks: this.state.playlistTracks })\n    }\n  }\n\n  handleOnRemove (track) {\n    this.setState({ playlistTracks: this.state.playlistTracks.filter(t => track.id !== t.id) })\n  }\n\n  handleOnNameChange (name) {\n    this.setState({ playlistName: name })\n  }\n\n  handleOnSave () {\n    const trackUris = this.state.playlistTracks.map(track => track.uri)\n    Spotify.savePlaylist(this.state.playlistName, trackUris)\n    this.setState({ playlistName: 'New Playlist', playlistTracks: [] })\n  }\n\n  handleSearch (term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>Play<span className='highlight'>Time</span></h1>\n        <div className='App'>\n          <SearchBar onSearch={this.handleSearch} />\n          <div className='App-playlist'>\n            <SearchResults onAdd={this.handleOnAdd} searchResults={this.state.searchResults} />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onNameChange={this.handleOnNameChange}\n              onSave={this.handleOnSave}\n              onRemove={this.handleOnRemove}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  // eslint-disable-next-line\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App/App.js'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}